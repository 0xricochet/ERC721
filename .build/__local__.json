{"manifest": "ethpm/3", "sources": {"Tokens.vy": {"checksum": {"algorithm": "md5", "hash": "f672733693a7a2053dab5b262b693f65"}, "urls": [], "content": "# @version 0.3.2\n\nfrom vyper.interfaces import ERC20\nfrom vyper.interfaces import ERC165\nfrom vyper.interfaces import ERC721\n\nimport ERC4626 as ERC4626\n\nimplements: ERC165\nimplements: ERC721\n\n\n############ ERC-165 #############\n\n# @dev Static list of supported ERC165 interface ids\nSUPPORTED_INTERFACES: constant(bytes4[3]) = [\n    0x01ffc9a7,  # ERC165 interface ID of ERC165\n    0x80ac58cd,  # ERC165 interface ID of ERC721\n    0x5604e225,  # ERC165 interface ID of ERC4494\n]\n\n\n############ ERC-721 #############\n\n# Interface for the contract called by safeTransferFrom()\ninterface ERC721Receiver:\n    def onERC721Received(\n            operator: address,\n            owner: address,\n            tokenId: uint256,\n            data: Bytes[1024]\n        ) -> bytes32: view\n\n# @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\n#      created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\n#      number of NFTs may be created and assigned without emitting Transfer. At the time of any\n#      transfer, the approved address for that NFT (if any) is reset to none.\n# @param owner Sender of NFT (if address is zero address it indicates token creation).\n# @param receiver Receiver of NFT (if address is zero address it indicates token destruction).\n# @param tokenId The NFT that got transfered.\nevent Transfer:\n    sender: indexed(address)\n    receiver: indexed(address)\n    tokenId: indexed(uint256)\n\n# @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\n#      address indicates there is no approved address. When a Transfer event emits, this also\n#      indicates that the approved address for that NFT (if any) is reset to none.\n# @param owner Owner of NFT.\n# @param approved Address that we are approving.\n# @param tokenId NFT which we are approving.\nevent Approval:\n    owner: indexed(address)\n    approved: indexed(address)\n    tokenId: indexed(uint256)\n\n# @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\n#      all NFTs of the owner.\n# @param owner Owner of NFT.\n# @param operator Address to which we are setting operator rights.\n# @param approved Status of operator rights(true if operator rights are given and false if\n# revoked).\nevent ApprovalForAll:\n    owner: indexed(address)\n    operator: indexed(address)\n    approved: bool\n\nasset: public(ERC721)\n\nstruct Owner:\n    owner: address  # NOTE: Track ERC721 ownership here\n    blockCreated: uint256\n\n# @dev PortfolioID {keccak(originalOwner + blockCreated)} => Owner\nidToOwner: public(HashMap[uint256, Owner])\n\n# @dev Mapping from owner address to count of their tokens.\nbalanceOf: public(HashMap[address, uint256])\n\n# @dev Mapping from owner address to mapping of operator addresses.\nisApprovedForAll: public(HashMap[address, HashMap[address, bool]])\n\n# @dev Mapping from NFT ID to approved address.\nidToApprovals: public(HashMap[uint256, address])\n\n\n############ ERC-4494 ############\n\n# @dev Mapping of TokenID to nonce values used for ERC4494 signature verification\nnonces: public(HashMap[uint256, uint256])\n\nDOMAIN_SEPARATOR: public(bytes32)\n\nEIP712_DOMAIN_TYPEHASH: constant(bytes32) = keccak256(\n    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n)\nEIP712_DOMAIN_NAMEHASH: constant(bytes32) = keccak256(\"Owner NFT\")\nEIP712_DOMAIN_VERSIONHASH: constant(bytes32) = keccak256(\"1\")\n\n\n@external\ndef __init__(asset: ERC20):\n    \"\"\"\n    @dev Contract constructor.\n    \"\"\"\n    self.asset = asset\n\n    # ERC712 domain separator for ERC4494\n    self.DOMAIN_SEPARATOR = keccak256(\n        _abi_encode(\n            EIP712_DOMAIN_TYPEHASH,\n            EIP712_DOMAIN_NAMEHASH,\n            EIP712_DOMAIN_VERSIONHASH,\n            chain.id,\n            self,\n        )\n    )\n\n\n@external\ndef setDomainSeparator():\n    \"\"\"\n    @dev Update the domain separator in case of a hardfork where chain ID changes\n    \"\"\"\n    self.DOMAIN_SEPARATOR = keccak256(\n        _abi_encode(\n            EIP712_DOMAIN_TYPEHASH,\n            EIP712_DOMAIN_NAMEHASH,\n            EIP712_DOMAIN_VERSIONHASH,\n            chain.id,\n            self,\n        )\n    )\n\n\n############ ERC-165 #############\n\n@pure\n@external\ndef supportsInterface(interface_id: bytes4) -> bool:\n    \"\"\"\n    @dev Interface identification is specified in ERC-165.\n    @param interface_id Id of the interface\n    \"\"\"\n    return interface_id in SUPPORTED_INTERFACES\n\n\n##### ERC-721 VIEW FUNCTIONS #####\n\n@view\n@external\ndef ownerOf(tokenId: uint256) -> address:\n    \"\"\"\n    @dev Returns the address of the owner of the NFT.\n         Throws if `tokenId` is not a valid NFT.\n    @param tokenId The identifier for an NFT.\n    \"\"\"\n    owner: address = self.idToOwner[tokenId].owner\n    # Throws if `tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    return owner\n\n\n@view\n@external\ndef getApproved(tokenId: uint256) -> address:\n    \"\"\"\n    @dev Get the approved address for a single NFT.\n         Throws if `tokenId` is not a valid NFT.\n    @param tokenId ID of the NFT to query the approval of.\n    \"\"\"\n    # Throws if `tokenId` is not a valid NFT\n    assert self.idToOwner[tokenId].owner != ZERO_ADDRESS\n    return self.idToApprovals[tokenId]\n\n\n### TRANSFER FUNCTION HELPERS ###\n\n@view\n@internal\ndef _isApprovedOrOwner(spender: address, tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Returns whether the given spender can transfer a given token ID\n    @param spender address of the spender to query\n    @param tokenId uint256 ID of the token to be transferred\n    @return bool whether the msg.sender is approved for the given token ID,\n        is an operator of the owner, or is the owner of the token\n    \"\"\"\n    owner: address = self.idToOwner[tokenId].owner\n\n    if owner == spender:\n        return True\n\n    if spender == self.idToApprovals[tokenId]:\n        return True\n\n    if (self.isApprovedForAll[owner])[spender]:\n        return True\n\n    return False\n\n\n@internal\ndef _transferFrom(owner: address, receiver: address, tokenId: uint256, sender: address):\n    \"\"\"\n    @dev Exeute transfer of a NFT.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT. (NOTE: `msg.sender` not allowed in private function so pass `_sender`.)\n         Throws if `receiver` is the zero address.\n         Throws if `owner` is not the current owner.\n         Throws if `tokenId` is not a valid NFT.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(sender, tokenId)\n    assert receiver != ZERO_ADDRESS\n    assert owner != ZERO_ADDRESS\n    assert self.idToOwner[tokenId].owner == owner\n\n    # Reset approvals, if any\n    if self.idToApprovals[tokenId] != ZERO_ADDRESS:\n        self.idToApprovals[tokenId] = ZERO_ADDRESS\n\n    # EIP-4494: increment nonce on transfer for safety\n    self.nonces[tokenId] += 1\n\n    # Change the owner\n    self.idToOwner[tokenId].owner = receiver\n\n    # Change count tracking\n    self.balanceOf[receiver] -= 1\n    self.balanceOf[receiver] += 1\n\n    # Log the transfer\n    log Transfer(owner, receiver, tokenId)\n\n\n@external\ndef transferFrom(owner: address, receiver: address, tokenId: uint256):\n    \"\"\"\n    @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `owner` is not the current owner.\n         Throws if `receiver` is the zero address.\n         Throws if `tokenId` is not a valid NFT.\n    @notice The caller is responsible to confirm that `receiver` is capable of receiving NFTs or else\n            they maybe be permanently lost.\n    @param owner The current owner of the NFT.\n    @param receiver The new owner.\n    @param tokenId The NFT to transfer.\n    \"\"\"\n    self._transferFrom(owner, receiver, tokenId, msg.sender)\n\n\n@external\ndef safeTransferFrom(\n        owner: address,\n        receiver: address,\n        tokenId: uint256,\n        data: Bytes[1024]=b\"\"\n    ):\n    \"\"\"\n    @dev Transfers the ownership of an NFT from one address to another address.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\n         approved address for this NFT.\n         Throws if `owner` is not the current owner.\n         Throws if `receiver` is the zero address.\n         Throws if `tokenId` is not a valid NFT.\n         If `receiver` is a smart contract, it calls `onERC721Received` on `receiver` and throws if\n         the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n         NOTE: bytes4 is represented by bytes32 with padding\n    @param owner The current owner of the NFT.\n    @param receiver The new owner.\n    @param tokenId The NFT to transfer.\n    @param data Additional data with no specified format, sent in call to `receiver`.\n    \"\"\"\n    self._transferFrom(owner, receiver, tokenId, msg.sender)\n    if receiver.is_contract: # check if `receiver` is a contract address\n        returnValue: bytes32 = ERC721Receiver(receiver).onERC721Received(msg.sender, owner, tokenId, data)\n        # Throws if transfer destination is a contract which does not implement 'onERC721Received'\n        assert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", output_type=bytes32)\n\n\n@external\ndef approve(operator: address, tokenId: uint256):\n    \"\"\"\n    @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\n         Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\n         Throws if `tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\n         Throws if `operator` is the current owner. (NOTE: This is not written the EIP)\n    @param operator Address to be approved for the given NFT ID.\n    @param tokenId ID of the token to be approved.\n    \"\"\"\n    # Throws if `tokenId` is not a valid NFT\n    owner: address = self.idToOwner[tokenId].owner\n    assert owner != ZERO_ADDRESS\n\n    # Throws if `operator` is the current owner\n    assert operator != owner\n\n    # Throws if `msg.sender` is not the current owner, or is approved for all actions\n    assert owner == msg.sender or (self.isApprovedForAll[owner])[msg.sender]\n\n    self.idToApprovals[tokenId] = operator\n    log Approval(owner, operator, tokenId)\n\n\n@external\ndef permit(spender: address, tokenId: uint256, deadline: uint256, sig: Bytes[65]) -> bool:\n    \"\"\"\n    @dev Allow a 3rd party to approve a transfer via EIP-721 message\n        Raises if permit has expired\n        Raises if `tokenId` is unowned\n        Raises if permit is not signed by token owner\n        Raises if `nonce` is not the current expected value\n        Raises if `sig` is not a supported signature type\n    @param spender The approved spender of `tokenId` for the permit\n    @param tokenId The token that is being approved\n        NOTE: signer is checked against this token's owner\n    @param deadline The time limit for which the message is valid for\n    @param sig The signature for the message, either in vrs or EIP-2098 form\n    @return bool If the operation is successful\n    \"\"\"\n    # Permit is still valid\n    assert block.timestamp <= deadline\n\n    # Ensure the token is owned by someone\n    owner: address = self.idToOwner[tokenId].owner\n    assert owner != ZERO_ADDRESS\n\n    # Nonce for given token (signer must ensure they use latest)\n    nonce: uint256 = self.nonces[tokenId]\n\n    # Compose EIP-712 message\n    message: bytes32 = keccak256(\n        _abi_encode(\n            0x1901,\n            self.DOMAIN_SEPARATOR,\n            keccak256(\n                _abi_encode(\n                    keccak256(\n                        \"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\"\n                    ),\n                    spender,\n                    tokenId,\n                    nonce,\n                    deadline,\n                )\n            )\n        )\n    )\n\n    # Validate signature\n    v: uint256 = 0\n    r: uint256 = 0\n    s: uint256 = 0\n\n    if len(sig) == 65:\n        # Normal encoded VRS signatures\n        v = convert(slice(sig, 0, 1), uint256)\n        r = convert(slice(sig, 1, 32), uint256)\n        s = convert(slice(sig, 33, 32), uint256)\n\n    elif len(sig) == 64:\n        # EIP-2098 compact signatures\n        r = convert(slice(sig, 0, 32), uint256)\n        v = convert(slice(sig, 33, 1), uint256)\n        s = convert(slice(sig, 34, 31), uint256)\n\n    else:\n        raise  # Other schemes not supported\n\n    # Ensure owner signed permit\n    assert ecrecover(message, v, r, s) == owner\n\n    self.nonces[tokenId] = nonce + 1\n    self.idToApprovals[tokenId] = spender\n\n    return True\n\n\n@external\ndef setApprovalForAll(operator: address, approved: bool):\n    \"\"\"\n    @dev Enables or disables approval for a third party (\"operator\") to manage all of\n         `msg.sender`'s assets. It also emits the ApprovalForAll event.\n    @notice This works even if sender doesn't own any tokens at the time.\n    @param operator Address to add to the set of authorized operators.\n    @param approved True if the operators is approved, false to revoke approval.\n    \"\"\"\n    self.isApprovedForAll[msg.sender][operator] = approved\n    log ApprovalForAll(msg.sender, operator, approved)\n\n\n#### PORTFOLIO MANAGEMENT FUNCTIONS ####\n\n@external\ndef mint() -> uint256:\n    \"\"\"\n    @dev Create a new Owner NFT\n    @notice `tokenId` cannot be owned by someone because of hash production.\n    @return uint256 Computed TokenID of new Portfolio.\n    \"\"\"\n    # Create token\n    tokenId: uint256 = convert(\n        keccak256(\n            concat(\n                convert(msg.sender, bytes32),\n                convert(block.number, bytes32),\n            )\n        ),\n        uint256,\n    )\n\n    assert self.idToOwner[tokenId].owner == ZERO_ADDRESS  # Sanity check\n    self.idToOwner[tokenId] = Owner({\n        owner: msg.sender,\n        blockCreated: block.number,\n    })\n    self.balanceOf[msg.sender] += 1\n\n    return tokenId\n"}, "ERC4626.json": {"checksum": {"algorithm": "md5", "hash": "89e7437e45b1e9f9683eb39f68cd127e"}, "urls": [], "content": "[{\n    \"name\": \"asset\",\n    \"type\": \"function\",\n    \"stateMutability\": \"view\",\n    \"inputs\": [],\n    \"outputs\": [{\n      \"name\": \"assetTokenAddress\",\n      \"type\": \"address\"\n    }]\n  }, {\n    \"name\": \"pricePerShare\",\n    \"type\": \"function\",\n    \"stateMutability\": \"view\",\n    \"inputs\": [],\n    \"outputs\": [{\n      \"name\": \"assetsPerUnitShare\",\n      \"type\": \"uint256\"\n    }]\n  }, {\n    \"name\": \"totalAssets\",\n    \"type\": \"function\",\n    \"stateMutability\": \"view\",\n    \"inputs\": [],\n    \"outputs\": [{\n      \"name\": \"totalAssets\",\n      \"type\": \"uint256\"\n    }]\n  }, {\n    \"name\": \"assetsOf\",\n    \"type\": \"function\",\n    \"stateMutability\": \"view\",\n    \"inputs\": [{\n      \"name\": \"depositor\",\n      \"type\": \"address\"\n    }],\n    \"outputs\": [{\n      \"name\": \"assets\",\n      \"type\": \"uint256\"\n    }]\n  }, {\n    \"name\": \"previewDeposit\",\n    \"type\": \"function\",\n    \"stateMutability\": \"view\",\n    \"inputs\": [{\n      \"name\": \"maxAssets\",\n      \"type\": \"uint256\"\n    }],\n    \"outputs\": [{\n      \"name\": \"depositedAssets\",\n      \"type\": \"uint256\"\n    }, {\n      \"name\": \"shares\",\n      \"type\": \"uint256\"\n    }]\n  }, {\n    \"name\": \"deposit\",\n    \"type\": \"function\",\n    \"stateMutability\": \"nonpayable\",\n    \"inputs\": [{\n      \"name\": \"assetsToDeposit\",\n      \"type\": \"uint256\"\n    }, {\n      \"name\": \"receiver\",\n      \"type\": \"address\"\n    }],\n    \"outputs\": [{\n      \"name\": \"sharesCreated\",\n      \"type\": \"uint256\"\n    }]\n  }, {\n    \"name\": \"previewMint\",\n    \"type\": \"function\",\n    \"stateMutability\": \"view\",\n    \"inputs\": [{\n      \"name\": \"maxShares\",\n      \"type\": \"uint256\"\n    }],\n    \"outputs\": [{\n      \"name\": \"assetsDeposited\",\n      \"type\": \"uint256\"\n    }, {\n      \"name\": \"sharesCreated\",\n      \"type\": \"uint256\"\n    }]\n  }, {\n    \"name\": \"mint\",\n    \"type\": \"function\",\n    \"stateMutability\": \"nonpayable\",\n    \"inputs\": [{\n      \"name\": \"sharesToMint\",\n      \"type\": \"uint256\"\n    }, {\n      \"name\": \"receiver\",\n      \"type\": \"address\"\n    }],\n    \"outputs\": [{\n      \"name\": \"assetsAccepted\",\n      \"type\": \"uint256\"\n    }]\n  }, {\n    \"name\": \"Deposit\",\n    \"type\": \"event\",\n    \"inputs\": [{\n      \"name\": \"sender\",\n      \"indexed\": true,\n      \"type\": \"address\"\n    }, {\n      \"name\": \"receiver\",\n      \"indexed\": true,\n      \"type\": \"address\"\n    }, {\n      \"name\": \"assets\",\n      \"indexed\": false,\n      \"type\": \"uint256\"\n    }]\n  }, {\n    \"name\": \"previewRedeem\",\n    \"type\": \"function\",\n    \"stateMutability\": \"view\",\n    \"inputs\": [{\n      \"name\": \"maxShares\",\n      \"type\": \"uint256\"\n    }],\n    \"outputs\": [{\n      \"name\": \"redeemedShares\",\n      \"type\": \"uint256\"\n    }, {\n      \"name\": \"maxAssets\",\n      \"type\": \"uint256\"\n    }]\n  }, {\n    \"name\": \"redeem\",\n    \"type\": \"function\",\n    \"stateMutability\": \"nonpayable\",\n    \"inputs\": [{\n      \"name\": \"sharesToRedeem\",\n      \"type\": \"uint256\"\n    }, {\n      \"name\": \"receiver\",\n      \"type\": \"address\"\n    }, {\n      \"name\": \"owner\",\n      \"type\": \"address\"\n    }],\n    \"outputs\": [{\n      \"name\": \"assetsRedeemed\",\n      \"type\": \"uint256\"\n    }]\n  }, {\n    \"name\": \"previewWithdraw\",\n    \"type\": \"function\",\n    \"stateMutability\": \"view\",\n    \"inputs\": [{\n      \"name\": \"maxShares\",\n      \"type\": \"uint256\"\n    }],\n    \"outputs\": [{\n      \"name\": \"redeemedShares\",\n      \"type\": \"uint256\"\n    }, {\n      \"name\": \"maxAssets\",\n      \"type\": \"uint256\"\n    }]\n  }, {\n    \"name\": \"withdraw\",\n    \"type\": \"function\",\n    \"stateMutability\": \"nonpayable\",\n    \"inputs\": [{\n      \"name\": \"sharesToRedeem\",\n      \"type\": \"uint256\"\n    }, {\n      \"name\": \"receiver\",\n      \"type\": \"address\"\n    }, {\n      \"name\": \"owner\",\n      \"type\": \"address\"\n    }],\n    \"outputs\": [{\n      \"name\": \"assetsWithdrawn\",\n      \"type\": \"uint256\"\n    }]\n  }, {\n    \"name\": \"Withdraw\",\n    \"type\": \"event\",\n    \"inputs\": [{\n      \"name\": \"owner\",\n      \"indexed\": true,\n      \"type\": \"address\"\n    }, {\n      \"name\": \"receiver\",\n      \"indexed\": true,\n      \"type\": \"address\"\n    }, {\n      \"name\": \"assets\",\n      \"indexed\": false,\n      \"type\": \"uint256\"\n    }]\n  }]"}}, "contractTypes": {"Tokens": {"contractName": "Tokens", "sourceId": "Tokens.vy", "deploymentBytecode": {"bytecode": "0x6020610bcd6000396000518060a01c610bc8576040526040516000557f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610140527f7cdb71fe8d5a059cd690d94a074487bcd71f2a0d1a84e621167ae16e80d09c21610160527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc661018052466101a052306101c05260a061012052610120805160208201209050600655610b056100c2630000000039610b056000016300000000f3600436101561000d57610942565b60003560e01c34610b005763e69a94bb81186100b3577f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610120527f7cdb71fe8d5a059cd690d94a074487bcd71f2a0d1a84e621167ae16e80d09c21610140527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6610160524661018052306101a05260a061010052610100805160208201209050600655005b6301ffc9a78118610179576004358060201b610b00576040526040517f01ffc9a7000000000000000000000000000000000000000000000000000000006080527f80ac58cd0000000000000000000000000000000000000000000000000000000060a0527f5604e2250000000000000000000000000000000000000000000000000000000060c052600060605260006003905b6020810260800151831861015e576001606052610169565b600101818118610146575b5050606051905060e052602060e0f35b636352211e81186101a8576001600435602052600052604060002054604052600060405114610b005760206040f35b63081812fc81186101e5576000600160043560205260005260406000205414610b0057600460043560205260005260406000205460405260206040f35b6323b872dd8118610231576004358060a01c610b0057610140526024358060a01c610b0057610160526101405160a0526101605160c05260443560e052336101005261022f6109cd565b005b6342842e0e81186102535760006105a0526105a0805180610180525050610283565b63b88d4fde811861037857606435600401610400813511610b0057803580610180526020820181816101a0375050505b6004358060a01c610b0057610140526024358060a01c610b0057610160526101405160a0526101605160c05260443560e05233610100526102c26109cd565b6000610160513b11156103765763150b7a026105e052608033610600526101405161062052604435610640528061066052806106000161018051808252602082018181836101a060045afa90505050805180602083010181600003601f163682375050601f19601f8251602001011690508101505060206105e06104a46105fc610160515afa610357573d600060003e3d6000fd5b60203d10610b00576105e0516105c05263150b7a026105c05118610b00575b005b63095ea7b38118610435576004358060a01c610b00576040526001602435602052600052604060002054606052600060605114610b005760605160405114610b005733606051186103ca5760016103eb565b60036060516020526000526040600020803360205260005260406000209050545b15610b005760405160046024356020526000526040600020556024356040516060517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560006080a4005b63745a41bc8118610705576004358060a01c610b00576040526064356004016041813511610b00578035806060526020820181816080375050506044354211610b0057600160243560205260005260406000205460e052600060e05114610b00576005602435602052600052604060002054610100527f19010000000000000000000000000000000000000000000000000000000000006104e052600654610500527f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad61042052604051610440526024356104605261010051610480526044356104a05260a0610400526104008051602082012090506105205260606104c0526104c080516020820120905061012052606036610140376041606051186105e557606051600111610b00576080516101c05260016101a0526101a0602081015181516020036008021c905061014052606051602111610b00576081516101c05260206101a0526101a0602081015181516020036008021c905061016052606051604111610b005760a1516101c05260206101a0526101a0602081015181516020036008021c905061018052610684565b60406060511861067e57606051602011610b00576080516101c05260206101a0526101a0602081015181516020036008021c905061016052606051602211610b005760a1516101c05260016101a0526101a0602081015181516020036008021c905061014052606051604111610b005760a2516101c052601f6101a0526101a0602081015181516020036008021c905061018052610684565b60006000fd5b60e051610120516101a052610140516101c052610160516101e05261018051610200526020600060806101a060015afa5060005118610b00576101005160018181830110610b0057808201905090506005602435602052600052604060002055604051600460243560205260005260406000205560016101a05260206101a0f35b63a22cb4658118610781576004358060a01c610b00576040526024358060011c610b00576060526060516003336020526000526040600020806040516020526000526040600020905055604051337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160605160805260206080a3005b631249c58b8118610814576000338160e00152602081019050438160e001526020810190508060c05260c090508051602082012090506040526001604051602052600052604060002054610b005760016040516020526000526040600020338155436001820155506002336020526000526040600020805460018181830110610b00578082019050905081555060206040f35b6338d52e0f811861082b5760005460405260206040f35b63bfc206ed811861085a5760016004356020526000526040600020805460405260018101546060525060406040f35b6370a08231811861088d576004358060a01c610b0057604052600260405160205260005260406000205460605260206060f35b63e985e9c581186108df576004358060a01c610b00576040526024358060a01c610b00576060526003604051602052600052604060002080606051602052600052604060002090505460805260206080f35b630f03a7ff811861090457600460043560205260005260406000205460405260206040f35b63141a468c811861092957600560043560205260005260406000205460405260206040f35b633644e51581186109405760065460405260206040f35b505b60006000fd5b6001606051602052600052604060002054608052604051608051186109715760018152506109cb565b6004606051602052600052604060002054604051186109945760018152506109cb565b60036080516020526000526040600020806040516020526000526040600020905054156109c55760018152506109cb565b60008152505b565b6101005160405260e0516060526109e5610120610948565b6101205115610b0057600060c05114610b0057600060a05114610b005760a051600160e05160205260005260406000205418610b00576000600460e05160205260005260406000205414610a47576000600460e0516020526000526040600020555b600560e0516020526000526040600020805460018181830110610b00578082019050905081555060c051600160e051602052600052604060002055600260c051602052600052604060002080546001808210610b005780820390509050815550600260c0516020526000526040600020805460018181830110610b00578082019050905081555060e05160c05160a0517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000610120a4565b600080fd005b600080fd"}, "runtimeBytecode": {"bytecode": "0x600436101561000d57610942565b60003560e01c34610b005763e69a94bb81186100b3577f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610120527f7cdb71fe8d5a059cd690d94a074487bcd71f2a0d1a84e621167ae16e80d09c21610140527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6610160524661018052306101a05260a061010052610100805160208201209050600655005b6301ffc9a78118610179576004358060201b610b00576040526040517f01ffc9a7000000000000000000000000000000000000000000000000000000006080527f80ac58cd0000000000000000000000000000000000000000000000000000000060a0527f5604e2250000000000000000000000000000000000000000000000000000000060c052600060605260006003905b6020810260800151831861015e576001606052610169565b600101818118610146575b5050606051905060e052602060e0f35b636352211e81186101a8576001600435602052600052604060002054604052600060405114610b005760206040f35b63081812fc81186101e5576000600160043560205260005260406000205414610b0057600460043560205260005260406000205460405260206040f35b6323b872dd8118610231576004358060a01c610b0057610140526024358060a01c610b0057610160526101405160a0526101605160c05260443560e052336101005261022f6109cd565b005b6342842e0e81186102535760006105a0526105a0805180610180525050610283565b63b88d4fde811861037857606435600401610400813511610b0057803580610180526020820181816101a0375050505b6004358060a01c610b0057610140526024358060a01c610b0057610160526101405160a0526101605160c05260443560e05233610100526102c26109cd565b6000610160513b11156103765763150b7a026105e052608033610600526101405161062052604435610640528061066052806106000161018051808252602082018181836101a060045afa90505050805180602083010181600003601f163682375050601f19601f8251602001011690508101505060206105e06104a46105fc610160515afa610357573d600060003e3d6000fd5b60203d10610b00576105e0516105c05263150b7a026105c05118610b00575b005b63095ea7b38118610435576004358060a01c610b00576040526001602435602052600052604060002054606052600060605114610b005760605160405114610b005733606051186103ca5760016103eb565b60036060516020526000526040600020803360205260005260406000209050545b15610b005760405160046024356020526000526040600020556024356040516060517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560006080a4005b63745a41bc8118610705576004358060a01c610b00576040526064356004016041813511610b00578035806060526020820181816080375050506044354211610b0057600160243560205260005260406000205460e052600060e05114610b00576005602435602052600052604060002054610100527f19010000000000000000000000000000000000000000000000000000000000006104e052600654610500527f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad61042052604051610440526024356104605261010051610480526044356104a05260a0610400526104008051602082012090506105205260606104c0526104c080516020820120905061012052606036610140376041606051186105e557606051600111610b00576080516101c05260016101a0526101a0602081015181516020036008021c905061014052606051602111610b00576081516101c05260206101a0526101a0602081015181516020036008021c905061016052606051604111610b005760a1516101c05260206101a0526101a0602081015181516020036008021c905061018052610684565b60406060511861067e57606051602011610b00576080516101c05260206101a0526101a0602081015181516020036008021c905061016052606051602211610b005760a1516101c05260016101a0526101a0602081015181516020036008021c905061014052606051604111610b005760a2516101c052601f6101a0526101a0602081015181516020036008021c905061018052610684565b60006000fd5b60e051610120516101a052610140516101c052610160516101e05261018051610200526020600060806101a060015afa5060005118610b00576101005160018181830110610b0057808201905090506005602435602052600052604060002055604051600460243560205260005260406000205560016101a05260206101a0f35b63a22cb4658118610781576004358060a01c610b00576040526024358060011c610b00576060526060516003336020526000526040600020806040516020526000526040600020905055604051337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160605160805260206080a3005b631249c58b8118610814576000338160e00152602081019050438160e001526020810190508060c05260c090508051602082012090506040526001604051602052600052604060002054610b005760016040516020526000526040600020338155436001820155506002336020526000526040600020805460018181830110610b00578082019050905081555060206040f35b6338d52e0f811861082b5760005460405260206040f35b63bfc206ed811861085a5760016004356020526000526040600020805460405260018101546060525060406040f35b6370a08231811861088d576004358060a01c610b0057604052600260405160205260005260406000205460605260206060f35b63e985e9c581186108df576004358060a01c610b00576040526024358060a01c610b00576060526003604051602052600052604060002080606051602052600052604060002090505460805260206080f35b630f03a7ff811861090457600460043560205260005260406000205460405260206040f35b63141a468c811861092957600560043560205260005260406000205460405260206040f35b633644e51581186109405760065460405260206040f35b505b60006000fd5b6001606051602052600052604060002054608052604051608051186109715760018152506109cb565b6004606051602052600052604060002054604051186109945760018152506109cb565b60036080516020526000526040600020806040516020526000526040600020905054156109c55760018152506109cb565b60008152505b565b6101005160405260e0516060526109e5610120610948565b6101205115610b0057600060c05114610b0057600060a05114610b005760a051600160e05160205260005260406000205418610b00576000600460e05160205260005260406000205414610a47576000600460e0516020526000526040600020555b600560e0516020526000526040600020805460018181830110610b00578082019050905081555060c051600160e051602052600052604060002055600260c051602052600052604060002080546001808210610b005780820390509050815550600260c0516020526000526040600020805460018181830110610b00578082019050905081555060e05160c05160a0517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000610120a4565b600080fd"}, "abi": [{"type": "event", "name": "Transfer", "inputs": [{"name": "sender", "type": "address", "indexed": true}, {"name": "receiver", "type": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "Approval", "inputs": [{"name": "owner", "type": "address", "indexed": true}, {"name": "approved", "type": "address", "indexed": true}, {"name": "tokenId", "type": "uint256", "indexed": true}], "anonymous": false}, {"type": "event", "name": "ApprovalForAll", "inputs": [{"name": "owner", "type": "address", "indexed": true}, {"name": "operator", "type": "address", "indexed": true}, {"name": "approved", "type": "bool", "indexed": false}], "anonymous": false}, {"type": "constructor", "stateMutability": "nonpayable", "inputs": [{"name": "asset", "type": "address"}]}, {"type": "function", "name": "setDomainSeparator", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "supportsInterface", "stateMutability": "pure", "inputs": [{"name": "interface_id", "type": "bytes4"}], "outputs": [{"name": "", "type": "bool"}]}, {"type": "function", "name": "ownerOf", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256"}], "outputs": [{"name": "", "type": "address"}]}, {"type": "function", "name": "getApproved", "stateMutability": "view", "inputs": [{"name": "tokenId", "type": "uint256"}], "outputs": [{"name": "", "type": "address"}]}, {"type": "function", "name": "transferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address"}, {"name": "receiver", "type": "address"}, {"name": "tokenId", "type": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address"}, {"name": "receiver", "type": "address"}, {"name": "tokenId", "type": "uint256"}], "outputs": []}, {"type": "function", "name": "safeTransferFrom", "stateMutability": "nonpayable", "inputs": [{"name": "owner", "type": "address"}, {"name": "receiver", "type": "address"}, {"name": "tokenId", "type": "uint256"}, {"name": "data", "type": "bytes"}], "outputs": []}, {"type": "function", "name": "approve", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address"}, {"name": "tokenId", "type": "uint256"}], "outputs": []}, {"type": "function", "name": "permit", "stateMutability": "nonpayable", "inputs": [{"name": "spender", "type": "address"}, {"name": "tokenId", "type": "uint256"}, {"name": "deadline", "type": "uint256"}, {"name": "sig", "type": "bytes"}], "outputs": [{"name": "", "type": "bool"}]}, {"type": "function", "name": "setApprovalForAll", "stateMutability": "nonpayable", "inputs": [{"name": "operator", "type": "address"}, {"name": "approved", "type": "bool"}], "outputs": []}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [], "outputs": [{"name": "", "type": "uint256"}]}, {"type": "function", "name": "asset", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address"}]}, {"type": "function", "name": "idToOwner", "stateMutability": "view", "inputs": [{"name": "arg0", "type": "uint256"}], "outputs": [{"name": "", "type": "tuple", "components": [{"name": "owner", "type": "address"}, {"name": "blockCreated", "type": "uint256"}]}]}, {"type": "function", "name": "balanceOf", "stateMutability": "view", "inputs": [{"name": "arg0", "type": "address"}], "outputs": [{"name": "", "type": "uint256"}]}, {"type": "function", "name": "isApprovedForAll", "stateMutability": "view", "inputs": [{"name": "arg0", "type": "address"}, {"name": "arg1", "type": "address"}], "outputs": [{"name": "", "type": "bool"}]}, {"type": "function", "name": "idToApprovals", "stateMutability": "view", "inputs": [{"name": "arg0", "type": "uint256"}], "outputs": [{"name": "", "type": "address"}]}, {"type": "function", "name": "nonces", "stateMutability": "view", "inputs": [{"name": "arg0", "type": "uint256"}], "outputs": [{"name": "", "type": "uint256"}]}, {"type": "function", "name": "DOMAIN_SEPARATOR", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bytes32"}]}], "userdoc": {"methods": {"transferFrom(address,address,uint256)": {"notice": "The caller is responsible to confirm that `receiver` is capable of receiving NFTs or else they maybe be permanently lost."}, "setApprovalForAll(address,bool)": {"notice": "This works even if sender doesn't own any tokens at the time."}, "mint()": {"notice": "`tokenId` cannot be owned by someone because of hash production."}}}, "devdoc": {"methods": {"__init__(address)": {"details": "Contract constructor."}, "setDomainSeparator()": {"details": "Update the domain separator in case of a hardfork where chain ID changes"}, "supportsInterface(bytes4)": {"details": "Interface identification is specified in ERC-165.", "params": {"interface_id": "Id of the interface"}}, "ownerOf(uint256)": {"details": "Returns the address of the owner of the NFT. Throws if `tokenId` is not a valid NFT.", "params": {"tokenId": "The identifier for an NFT."}}, "getApproved(uint256)": {"details": "Get the approved address for a single NFT. Throws if `tokenId` is not a valid NFT.", "params": {"tokenId": "ID of the NFT to query the approval of."}}, "transferFrom(address,address,uint256)": {"details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `owner` is not the current owner. Throws if `receiver` is the zero address. Throws if `tokenId` is not a valid NFT.", "params": {"owner": "The current owner of the NFT.", "receiver": "The new owner.", "tokenId": "The NFT to transfer."}}, "safeTransferFrom(address,address,uint256)": {"details": "Transfers the ownership of an NFT from one address to another address. Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `owner` is not the current owner. Throws if `receiver` is the zero address. Throws if `tokenId` is not a valid NFT. If `receiver` is a smart contract, it calls `onERC721Received` on `receiver` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`. NOTE: bytes4 is represented by bytes32 with padding", "params": {"owner": "The current owner of the NFT.", "receiver": "The new owner.", "tokenId": "The NFT to transfer.", "data": "Additional data with no specified format, sent in call to `receiver`."}}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "Transfers the ownership of an NFT from one address to another address. Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `owner` is not the current owner. Throws if `receiver` is the zero address. Throws if `tokenId` is not a valid NFT. If `receiver` is a smart contract, it calls `onERC721Received` on `receiver` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`. NOTE: bytes4 is represented by bytes32 with padding", "params": {"owner": "The current owner of the NFT.", "receiver": "The new owner.", "tokenId": "The NFT to transfer.", "data": "Additional data with no specified format, sent in call to `receiver`."}}, "approve(address,uint256)": {"details": "Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner. Throws if `tokenId` is not a valid NFT. (NOTE: This is not written the EIP) Throws if `operator` is the current owner. (NOTE: This is not written the EIP)", "params": {"operator": "Address to be approved for the given NFT ID.", "tokenId": "ID of the token to be approved."}}, "permit(address,uint256,uint256,bytes)": {"details": "Allow a 3rd party to approve a transfer via EIP-721 message Raises if permit has expired Raises if `tokenId` is unowned Raises if permit is not signed by token owner Raises if `nonce` is not the current expected value Raises if `sig` is not a supported signature type", "params": {"spender": "The approved spender of `tokenId` for the permit", "tokenId": "The token that is being approved NOTE: signer is checked against this token's owner", "deadline": "The time limit for which the message is valid for", "sig": "The signature for the message, either in vrs or EIP-2098 form"}, "returns": {"_0": "bool If the operation is successful"}}, "setApprovalForAll(address,bool)": {"details": "Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.", "params": {"operator": "Address to add to the set of authorized operators.", "approved": "True if the operators is approved, false to revoke approval."}}, "mint()": {"details": "Create a new Owner NFT", "returns": {"_0": "uint256 Computed TokenID of new Portfolio."}}}}}, "ERC4626": {"contractName": "ERC4626", "sourceId": "ERC4626.json", "abi": [{"type": "function", "name": "asset", "stateMutability": "view", "inputs": [], "outputs": [{"name": "assetTokenAddress", "type": "address"}]}, {"type": "function", "name": "pricePerShare", "stateMutability": "view", "inputs": [], "outputs": [{"name": "assetsPerUnitShare", "type": "uint256"}]}, {"type": "function", "name": "totalAssets", "stateMutability": "view", "inputs": [], "outputs": [{"name": "totalAssets", "type": "uint256"}]}, {"type": "function", "name": "assetsOf", "stateMutability": "view", "inputs": [{"name": "depositor", "type": "address"}], "outputs": [{"name": "assets", "type": "uint256"}]}, {"type": "function", "name": "previewDeposit", "stateMutability": "view", "inputs": [{"name": "maxAssets", "type": "uint256"}], "outputs": [{"name": "depositedAssets", "type": "uint256"}, {"name": "shares", "type": "uint256"}]}, {"type": "function", "name": "deposit", "stateMutability": "nonpayable", "inputs": [{"name": "assetsToDeposit", "type": "uint256"}, {"name": "receiver", "type": "address"}], "outputs": [{"name": "sharesCreated", "type": "uint256"}]}, {"type": "function", "name": "previewMint", "stateMutability": "view", "inputs": [{"name": "maxShares", "type": "uint256"}], "outputs": [{"name": "assetsDeposited", "type": "uint256"}, {"name": "sharesCreated", "type": "uint256"}]}, {"type": "function", "name": "mint", "stateMutability": "nonpayable", "inputs": [{"name": "sharesToMint", "type": "uint256"}, {"name": "receiver", "type": "address"}], "outputs": [{"name": "assetsAccepted", "type": "uint256"}]}, {"type": "event", "name": "Deposit", "inputs": [{"name": "sender", "type": "address", "indexed": true}, {"name": "receiver", "type": "address", "indexed": true}, {"name": "assets", "type": "uint256", "indexed": false}], "anonymous": false}, {"type": "function", "name": "previewRedeem", "stateMutability": "view", "inputs": [{"name": "maxShares", "type": "uint256"}], "outputs": [{"name": "redeemedShares", "type": "uint256"}, {"name": "maxAssets", "type": "uint256"}]}, {"type": "function", "name": "redeem", "stateMutability": "nonpayable", "inputs": [{"name": "sharesToRedeem", "type": "uint256"}, {"name": "receiver", "type": "address"}, {"name": "owner", "type": "address"}], "outputs": [{"name": "assetsRedeemed", "type": "uint256"}]}, {"type": "function", "name": "previewWithdraw", "stateMutability": "view", "inputs": [{"name": "maxShares", "type": "uint256"}], "outputs": [{"name": "redeemedShares", "type": "uint256"}, {"name": "maxAssets", "type": "uint256"}]}, {"type": "function", "name": "withdraw", "stateMutability": "nonpayable", "inputs": [{"name": "sharesToRedeem", "type": "uint256"}, {"name": "receiver", "type": "address"}, {"name": "owner", "type": "address"}], "outputs": [{"name": "assetsWithdrawn", "type": "uint256"}]}, {"type": "event", "name": "Withdraw", "inputs": [{"name": "owner", "type": "address", "indexed": true}, {"name": "receiver", "type": "address", "indexed": true}, {"name": "assets", "type": "uint256", "indexed": false}], "anonymous": false}]}}}